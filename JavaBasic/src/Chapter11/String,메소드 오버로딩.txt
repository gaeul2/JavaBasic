//메소드 오버로딩//
    메소드의 이름 , 매개변수정보를 보고 판단하므로
    형태가 다른 메소드를 정의하는것이 가능.
     - 매개변수의 수가 달라도 / 형이달라고 가능
     - 그러나 반환형이 다른것은 메소드 오버로딩 조건이 아님

//this를 이용한 다른 생성자의 호출//
    생성자 안에서 this(다른생성자의 매개변수, ...) 이러한 형태로 사용시 다른 생성자 호출가능

//String//
    String은 immutable해서 값이 변하지 않음
        = 메서드 =
            - length() : 길이반환

            - concat() : 문자열 이어줌. String은 immutable이므로 이어진 글자가 새로 생성됨
                -> 문자열1.concat(문자열2) => 문자열1문자열2 을 반환. 이것을 담을 변수가 있으면 좋겠지?
                -> 메소드 이어서 호출 가능

            - substring() : 인덱싱~슬라이싱
                -> substring(인덱스번호) : 해당 인덱스번호 글자 반환
                -> substring(인덱스번호1, 인덱스번호2) : 인덱스번호1 ~ 2(-1) 에 해당하는 문자열 반환.

            - equals() : 내용비교 (cf) ==는 같은 인스턴스인지를 비교, 즉 값을 비교하는게 아님
                문자열1.equals(문자열2) : 문자열1과 문자열2가 내용이 같은 값인지 비교 (boolean반환)

            - compareTo() : 사전식 내용비교 (대소문자 구별)
                문자열1.compareTro(문자열2) : 문자열1과 문자열2를 비교 (int반환)
                같으면 0 반환, 다르면 0보다 작거나 0보다 큰 숫자 반환. 반환값을 변수에 저장하고 사용하는게 낫겠지?
                사전식 비교이므로 0보다 작은 값을 반환시 -> 문자열1이 문자열2보다 사전상 앞에있는 단어.
                                0보다 큰 값을 반환시 -> 문자열1이 문자열2보다 사전상 뒤에 있는 단어

            - compareToIgnoreCase() : 사전식 내용비교 (대소문자 상관X)
                compareTo()와 같으나 대소문자를 구별않고 비교. 0이면 같은것, -1은 사전상 앞선단어, 1은 사전상 뒤단어 (int반환)

            - valueOf() : static 메소드로 String.valueOf()형태로 사용.


// StringBuilder //
    단일 쓰레드에서 사용하기 좋음. / 다중쓰레드, 동기화 필요시에는 StringBuffer를 사용하는게 좋음
    mutable
    내부에 buffer가 있어 용량이 커지면 알아서 buffer를 늘림.
    내부 메서드중 append는 자기자신을 참조
        - new StringBuilder("나".append("는").append("15").append("세")).toStirng();
          ------------------------------------------------------------
          까지는 내부 buffer에 저장하기만 함.
          toString()호출시 내부 buffer에 있는 문자들을 String인스턴스로 반환해줌
          buffer에 있는 내용중 일부만 출력하고 싶을때는 substring()사용

    = 메서드 =
        - append() : 자기자신 참조하여 buffer에 내용 더함
        - delete() : 문자열 일부 삭제
        - replace() : 문자열 일부 교체
        - reverse() : 문자열 내용 뒤집기 (뒤집은 후 뒤집은게 buffer에 그대로 적용됨)
        - substring() : 일부만 문자열로 반환
        - toString() : 호출해도 되고, 내부적으로 구현이 되어있기때문에 인스턴스 그냥 호출하면 알아서 문자열 반환됨

// StringBuffer //
    StringBuilder와 비슷하지만
    쓰레드에 안전.